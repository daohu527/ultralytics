# Ultralytics YOLO üöÄ, AGPL-3.0 license
# S2TLD dataset https://github.com/Thinklab-SJTU/S2TLD by SJTU
# Example usage: yolo train data=S2TLD.yaml
# parent
# ‚îú‚îÄ‚îÄ ultralytics
# ‚îî‚îÄ‚îÄ datasets
#     ‚îî‚îÄ‚îÄ S2TLD  ‚Üê downloads here (305 MB)


# Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]
path: ../datasets/S2TLD
train: # train images (relative to 'path')  16551 images
  - images/train
val: # val images (relative to 'path')  4952 images
  - images/val
test: # test images (optional)

# Classes
names:
  0: red
  1: yellow
  2: green
  3: off
  4: wait_on

# Download script/URL (optional) ---------------------------------------------------------------------------------------
download: |
  import os
  import xml.etree.ElementTree as ET

  from tqdm import tqdm
  from ultralytics.utils.downloads import download
  from pathlib import Path
  from torch.utils.data import random_split

  def convert_label(dir, lb_path, image_id):
      def convert_box(size, box):
          dw, dh = 1. / size[0], 1. / size[1]
          x, y, w, h = (box[0] + box[1]) / 2.0 - 1, (box[2] + box[3]) / 2.0 - 1, box[1] - box[0], box[3] - box[2]
          return x * dw, y * dh, w * dw, h * dh

      in_file = open(dir / f'Annotations/{image_id}.xml')
      out_file = open(lb_path, 'w')
      tree = ET.parse(in_file)
      root = tree.getroot()
      size = root.find('size')
      w = int(size.find('width').text)
      h = int(size.find('height').text)

      names = list(yaml['names'].values())  # names list
      for obj in root.iter('object'):
          cls = obj.find('name').text
          if cls in names:
              xmlbox = obj.find('bndbox')
              bb = convert_box((w, h), [float(xmlbox.find(x).text) for x in ('xmin', 'xmax', 'ymin', 'ymax')])
              cls_id = names.index(cls)  # class id
              out_file.write(" ".join(str(a) for a in (cls_id, *bb)) + '\n')


  # Download
  dir = Path(yaml['path'])  # dataset root dir

  # Convert
  image_names = os.listdir(dir / 'JPEGImages')
  train, val = random_split(image_names, [7, 3])
  dataset = {'train' : train, 'val': val}
  for image_set in ('train', 'val'):
      imgs_path = dir / 'images' / f'{image_set}'
      lbs_path = dir / 'labels' / f'{image_set}'
      imgs_path.mkdir(exist_ok=True, parents=True)
      lbs_path.mkdir(exist_ok=True, parents=True)

      for file_name in tqdm(dataset[image_set], desc=f'Converting {dir}'):
          id = os.path.splitext(file_name)[0]
          f = dir / f'JPEGImages/{id}.jpg'  # old img path
          lb_path = (lbs_path / f.name).with_suffix('.txt')  # new label path
          f.rename(imgs_path / f.name)  # move image
          convert_label(dir, lb_path, id)  # convert labels to YOLO format
